(dp1
S'output'
p2
S''
sS'layer'
p3
S'/Users/james.sandlin/scripts/python/web2py/web2py.app/Contents/Resources/applications/cookbook/models/db.py'
p4
sS'code'
p5
S"# -*- coding: utf-8 -*- \n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n   db = DAL('gae')                           # connect to Google BigTable\n   session.connect(request, response, db=db) # and store sessions and tickets there\n   ### or use the following lines to store sessions in Memcache\n   # from gluon.contrib.memdb import MEMDB\n   # from google.appengine.api.memcache import Client\n   # session.connect(request, response, db=MEMDB(Client())\nelse:                                         # else use a normal relational database\n   #db = DAL('sqlite://storage.sqlite')       # if not, use SQLite or other DB\n   import datetime; now=datetime.date.today()\n   db=SQLDB('mysql://web2py:web2py@localhost:3306/web2py')\n   db.define_table('category', SQLField('name'))\n   \n   db.define_table('recipe',\n                  SQLField('title'),\n                  SQLField('description', length=256),\n                  SQLField('category', db.category),\n                  SQLField('date', 'date', default=now),\n                  SQLField('instructions', 'text'))\n\n   db.category.name.requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db, 'category.name')]\n   db.recipe.title.requires=[IS_NOT_EMPTY()]\n   db.recipe.description.requires=IS_NOT_EMPTY()\n   db.recipe.category.requires=IS_IN_DB(db, 'category.id', 'category.name')\n   db.recipe.date.requires=IS_DATE()\n   \n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## comment/uncomment as needed\n\nfrom gluon.tools import *\nauth=Auth(globals(),db)                      # authentication/authorization\nauth.settings.hmac_key='sha512:4bb1d652-006d-42e8-8d37-1eb5306ed957'\nauth.define_tables()                         # creates all needed tables\ncrud=Crud(globals(),db)                      # for CRUD helpers using auth\nservice=Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\n\n# crud.settings.auth=auth                      # enforces authorization on crud\n# mail=Mail()                                  # mailer\n# mail.settings.server='smtp.gmail.com:587'    # your SMTP server\n# mail.settings.sender='you@gmail.com'         # your email\n# mail.settings.login='username:password'      # your credentials or None\n# auth.settings.mailer=mail                    # for user email verification\n# auth.settings.registration_requires_verification = True\n# auth.settings.registration_requires_approval = True\n# auth.messages.verify_email = \\\n#  'Click on the link http://.../user/verify_email/%(key)s to verify your email'\n## more options discussed in gluon/tools.py\n#########################################################################\n\n#########################################################################\n## Define your tables below, for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n"
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 173, in restricted\n  File "/Users/james.sandlin/scripts/python/web2py/web2py.app/Contents/Resources/applications/cookbook/models/db.py", line 17, in <module>\n  File "gluon/sql.py", line 915, in __init__\n  File "gluon/sql.py", line 825, in _pool_connection\n  File "gluon/sql.py", line 915, in <lambda>\nNameError: global name \'MySQLdb\' is not defined\n'
p8
s.