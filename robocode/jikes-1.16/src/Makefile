# Makefile.in generated by automake 1.6.2 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


SHELL = /bin/bash

srcdir = .
top_srcdir = ..

prefix = /usr/local
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/info
mandir = ${prefix}/man
includedir = ${prefix}/include
oldincludedir = /usr/include
pkgdatadir = $(datadir)/jikes
pkglibdir = $(libdir)/jikes
pkgincludedir = $(includedir)/jikes
top_builddir = ..

ACLOCAL = ${SHELL} /home/c8h10n4o2/robocode/jikes-1.16/missing --run aclocal-1.6
AUTOCONF = ${SHELL} /home/c8h10n4o2/robocode/jikes-1.16/missing --run autoconf
AUTOMAKE = ${SHELL} /home/c8h10n4o2/robocode/jikes-1.16/missing --run automake-1.6
AUTOHEADER = ${SHELL} /home/c8h10n4o2/robocode/jikes-1.16/missing --run autoheader

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA = ${INSTALL} -m 644
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = ${INSTALL}
INSTALL_HEADER = $(INSTALL_DATA)
transform = s,x,x,
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = 
host_triplet = i686-pc-linux-gnu

EXEEXT = 
OBJEXT = o
PATH_SEPARATOR = :
AMTAR = ${SHELL} /home/c8h10n4o2/robocode/jikes-1.16/missing --run tar
AWK = mawk
CXX = g++
DEPDIR = .deps
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
JIKESPG = jikespg
MAINT = #
PACKAGE = jikes
STRIP = strip
VERSION = 1.16
am__include = include
am__quote = 
install_sh = /home/c8h10n4o2/robocode/jikes-1.16/install-sh
bin_PROGRAMS = jikes

jikes_SOURCES = \
ast.cpp \
body.cpp \
bytecode.cpp \
case.cpp \
code.cpp \
control.cpp \
decl.cpp \
definite.cpp \
depend.cpp \
diagnose.cpp \
double.cpp \
dump.cpp \
error.cpp \
expr.cpp \
getclass.cpp \
incrmnt.cpp \
init.cpp \
javaact.cpp \
jikes.cpp \
jikesapi.cpp \
long.cpp \
lookup.cpp \
lpginput.cpp \
modifier.cpp \
op.cpp \
option.cpp \
parser.cpp \
platform.cpp \
scanner.cpp \
segment.cpp \
set.cpp \
stream.cpp \
symbol.cpp \
system.cpp \
tab.cpp \
unparse.cpp \
unzip.cpp \
zip.cpp


include_HEADERS = \
jikesapi.h


noinst_HEADERS = \
access.h \
ast.h \
bytecode.h \
case.h \
class.h \
code.h \
control.h \
depend.h \
diagnose.h \
double.h \
error.h \
getclass.h \
javaact.h \
javadcl.h \
javadef.h \
javaprs.h \
javasym.h \
jikesapi.h \
long.h \
lookup.h \
lpginput.h \
op.h \
option.h \
parser.h \
platform.h \
scanner.h \
segment.h \
semantic.h \
set.h \
spell.h \
stream.h \
symbol.h \
tab.h \
table.h \
tuple.h \
unzip.h \
zip.h



# Include the java.g and gencode.java files in the .tar ball
EXTRA_DIST = java.g gencode.java

# Special rules to remake autogenerated files
#PARSER_FILES = \
#javaact.cpp \
#javaact.h \
#javadcl.h \
#javadef.h \
#javaprs.h \
#javasym.h


#BUILT_SOURCES = $(PARSER_FILES) code.cpp code.h

# FIXME: hardcoded at the moment, makes bootstrap difficult...
#JAVA = java
#JAVAC = jikes
subdir = src
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
bin_PROGRAMS = jikes$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_jikes_OBJECTS = ast.$(OBJEXT) body.$(OBJEXT) bytecode.$(OBJEXT) \
	case.$(OBJEXT) code.$(OBJEXT) control.$(OBJEXT) decl.$(OBJEXT) \
	definite.$(OBJEXT) depend.$(OBJEXT) diagnose.$(OBJEXT) \
	double.$(OBJEXT) dump.$(OBJEXT) error.$(OBJEXT) expr.$(OBJEXT) \
	getclass.$(OBJEXT) incrmnt.$(OBJEXT) init.$(OBJEXT) \
	javaact.$(OBJEXT) jikes.$(OBJEXT) jikesapi.$(OBJEXT) \
	long.$(OBJEXT) lookup.$(OBJEXT) lpginput.$(OBJEXT) \
	modifier.$(OBJEXT) op.$(OBJEXT) option.$(OBJEXT) \
	parser.$(OBJEXT) platform.$(OBJEXT) scanner.$(OBJEXT) \
	segment.$(OBJEXT) set.$(OBJEXT) stream.$(OBJEXT) \
	symbol.$(OBJEXT) system.$(OBJEXT) tab.$(OBJEXT) \
	unparse.$(OBJEXT) unzip.$(OBJEXT) zip.$(OBJEXT)
jikes_OBJECTS = $(am_jikes_OBJECTS)
jikes_LDADD = $(LDADD)
jikes_DEPENDENCIES =
jikes_LDFLAGS =

DEFS = -DHAVE_CONFIG_H
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I.
CPPFLAGS = 
LDFLAGS = 
LIBS = 
depcomp =
am__depfiles_maybe =
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
CXXFLAGS = -g -O2
DIST_SOURCES = $(jikes_SOURCES)
HEADERS = $(include_HEADERS) $(noinst_HEADERS)

DIST_COMMON = $(include_HEADERS) $(noinst_HEADERS) Makefile.am \
	Makefile.in config.h.in
SOURCES = $(jikes_SOURCES)

all: $(BUILT_SOURCES) config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in: # Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  --ignore-deps src/Makefile
Makefile: # $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

config.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status src/config.h

$(srcdir)/config.h.in: # $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOHEADER)
	touch $(srcdir)/config.h.in

distclean-hdr:
	-rm -f config.h stamp-h1
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    p1=`echo "$$p1" | sed -e 's,^.*/,,'`; \
	    f=`echo $$p1|sed '$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  f=`echo "$$f" | sed -e 's,^.*/,,'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
jikes$(EXEEXT): $(jikes_OBJECTS) $(jikes_DEPENDENCIES) 
	@rm -f jikes$(EXEEXT)
	$(CXXLINK) $(jikes_LDFLAGS) $(jikes_OBJECTS) $(jikes_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

.cpp.o:
	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	$(CXXCOMPILE) -c -o $@ `cygpath -w $<`
uninstall-info-am:
includeHEADERS_INSTALL = $(INSTALL_HEADER)
install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(includedir)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(includeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(includedir)/$$f"; \
	  $(includeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(includedir)/$$f; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(includedir)/$$f"; \
	  rm -f $(DESTDIR)$(includedir)/$$f; \
	done

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@list='$(DISTFILES)'; for file in $$list; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) $(HEADERS) config.h

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir) $(DESTDIR)$(includedir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-generic distclean-hdr \
	distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am: install-includeHEADERS

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am: uninstall-binPROGRAMS uninstall-includeHEADERS \
	uninstall-info-am

.PHONY: GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic distclean distclean-compile distclean-generic \
	distclean-hdr distclean-tags distdir dvi dvi-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-exec install-exec-am \
	install-includeHEADERS install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-includeHEADERS \
	uninstall-info-am


#$(PARSER_FILES): java.g $(JIKESPG)
#	$(JIKESPG) java.g
#	rm -f java.l
#code.cpp code.h: gencode.java
#	$(JAVAC) $<
#	$(JAVA) gencode

# end special maintainer mode section

# This rule will build an efence malloc debugging enabled version of jikes.
# This should be used for testing purposes only! It is really slow!

efence:
	@rm -f jikes$(EXEEXT)
	$(CXXLINK) -o jikes$(EXEEXT) $(jikes_OBJECTS) -lstdc++ -lefence

# The rest of the entries in this file are dependencies
# manually extracted from the .h and .cpp files; I used g++ 2.95.3,
# compiling with -MM, then replacing .o with .$(OBJEXT).
#
# We choose not use the automatic dependency tracking available in
# automake because the depcomp script still has some
# portability problems with non-gcc compilers. If
# dependencies are changed in the source code, these
# deps will need to be manually updated.

$(jikes_OBJECTS): config.h

ast.$(OBJEXT): ast.cpp ast.h platform.h tuple.h jikesapi.h stream.h javadef.h \
 javasym.h tab.h lookup.h long.h double.h symbol.h code.h option.h \
 depend.h access.h case.h set.h
body.$(OBJEXT): body.cpp platform.h tuple.h jikesapi.h semantic.h ast.h \
 stream.h javadef.h javasym.h tab.h lookup.h long.h double.h symbol.h \
 code.h option.h depend.h access.h case.h set.h diagnose.h parser.h \
 lpginput.h javaprs.h javaact.h error.h control.h
bytecode.$(OBJEXT): bytecode.cpp bytecode.h platform.h tuple.h jikesapi.h \
 ast.h stream.h javadef.h javasym.h tab.h lookup.h long.h double.h \
 symbol.h code.h option.h depend.h access.h case.h set.h class.h \
 semantic.h diagnose.h parser.h lpginput.h javaprs.h javaact.h error.h \
 control.h op.h segment.h table.h
case.$(OBJEXT): case.cpp case.h platform.h tuple.h jikesapi.h
code.$(OBJEXT): code.cpp code.h platform.h tuple.h jikesapi.h
control.$(OBJEXT): control.cpp control.h platform.h tuple.h jikesapi.h \
 option.h code.h symbol.h stream.h javadef.h javasym.h tab.h lookup.h \
 long.h double.h depend.h access.h case.h set.h scanner.h parser.h \
 lpginput.h javaprs.h javaact.h semantic.h ast.h diagnose.h error.h \
 bytecode.h class.h op.h segment.h
decl.$(OBJEXT): decl.cpp platform.h tuple.h jikesapi.h semantic.h ast.h \
 stream.h javadef.h javasym.h tab.h lookup.h long.h double.h symbol.h \
 code.h option.h depend.h access.h case.h set.h diagnose.h parser.h \
 lpginput.h javaprs.h javaact.h error.h control.h table.h spell.h
definite.$(OBJEXT): definite.cpp platform.h tuple.h jikesapi.h semantic.h \
 ast.h stream.h javadef.h javasym.h tab.h lookup.h long.h double.h \
 symbol.h code.h option.h depend.h access.h case.h set.h diagnose.h \
 parser.h lpginput.h javaprs.h javaact.h error.h control.h
depend.$(OBJEXT): depend.cpp depend.h platform.h tuple.h jikesapi.h control.h \
 option.h code.h symbol.h stream.h javadef.h javasym.h tab.h lookup.h \
 long.h double.h access.h case.h set.h ast.h semantic.h diagnose.h \
 parser.h lpginput.h javaprs.h javaact.h error.h
diagnose.$(OBJEXT): diagnose.cpp diagnose.h platform.h tuple.h jikesapi.h \
 parser.h lpginput.h stream.h javadef.h javasym.h tab.h lookup.h \
 long.h double.h javaprs.h javaact.h control.h option.h code.h \
 symbol.h depend.h access.h case.h set.h semantic.h ast.h error.h \
 spell.h
double.$(OBJEXT): double.cpp double.h platform.h tuple.h jikesapi.h long.h
dump.$(OBJEXT): dump.cpp platform.h tuple.h jikesapi.h javasym.h control.h \
 option.h code.h symbol.h stream.h javadef.h tab.h lookup.h long.h \
 double.h depend.h access.h case.h set.h
error.$(OBJEXT): error.cpp error.h platform.h tuple.h jikesapi.h stream.h \
 javadef.h javasym.h tab.h lookup.h long.h double.h control.h option.h \
 code.h symbol.h depend.h access.h case.h set.h semantic.h ast.h \
 diagnose.h parser.h lpginput.h javaprs.h javaact.h
expr.$(OBJEXT): expr.cpp platform.h tuple.h jikesapi.h double.h long.h \
 parser.h lpginput.h stream.h javadef.h javasym.h tab.h lookup.h \
 javaprs.h javaact.h semantic.h ast.h symbol.h code.h option.h \
 depend.h access.h case.h set.h diagnose.h error.h control.h table.h \
 spell.h
getclass.$(OBJEXT): getclass.cpp getclass.h platform.h tuple.h jikesapi.h \
 semantic.h ast.h stream.h javadef.h javasym.h tab.h lookup.h long.h \
 double.h symbol.h code.h option.h depend.h access.h case.h set.h \
 diagnose.h parser.h lpginput.h javaprs.h javaact.h error.h control.h \
 zip.h unzip.h
incrmnt.$(OBJEXT): incrmnt.cpp platform.h tuple.h jikesapi.h control.h \
 option.h code.h symbol.h stream.h javadef.h javasym.h tab.h lookup.h \
 long.h double.h depend.h access.h case.h set.h scanner.h parser.h \
 lpginput.h javaprs.h javaact.h semantic.h ast.h diagnose.h error.h
init.$(OBJEXT): init.cpp platform.h tuple.h jikesapi.h semantic.h ast.h \
 stream.h javadef.h javasym.h tab.h lookup.h long.h double.h symbol.h \
 code.h option.h depend.h access.h case.h set.h diagnose.h parser.h \
 lpginput.h javaprs.h javaact.h error.h control.h
javaact.$(OBJEXT): javaact.cpp platform.h tuple.h jikesapi.h parser.h \
 lpginput.h stream.h javadef.h javasym.h tab.h lookup.h long.h \
 double.h javaprs.h javaact.h ast.h symbol.h code.h option.h depend.h \
 access.h case.h set.h
jikes.$(OBJEXT): jikes.cpp platform.h tuple.h jikesapi.h
jikesapi.$(OBJEXT): jikesapi.cpp platform.h tuple.h jikesapi.h control.h \
 option.h code.h symbol.h stream.h javadef.h javasym.h tab.h lookup.h \
 long.h double.h depend.h access.h case.h set.h
long.$(OBJEXT): long.cpp long.h platform.h tuple.h jikesapi.h double.h
lookup.$(OBJEXT): lookup.cpp lookup.h platform.h tuple.h jikesapi.h long.h \
 double.h control.h option.h code.h symbol.h stream.h javadef.h \
 javasym.h tab.h depend.h access.h case.h set.h ast.h
lpginput.$(OBJEXT): lpginput.cpp lpginput.h platform.h tuple.h jikesapi.h \
 stream.h javadef.h javasym.h tab.h lookup.h long.h double.h javaprs.h \
 javadcl.h
modifier.$(OBJEXT): modifier.cpp platform.h tuple.h jikesapi.h semantic.h \
 ast.h stream.h javadef.h javasym.h tab.h lookup.h long.h double.h \
 symbol.h code.h option.h depend.h access.h case.h set.h diagnose.h \
 parser.h lpginput.h javaprs.h javaact.h error.h control.h
op.$(OBJEXT): op.cpp op.h platform.h tuple.h jikesapi.h
option.$(OBJEXT): option.cpp option.h platform.h tuple.h jikesapi.h code.h \
 javasym.h error.h stream.h javadef.h tab.h lookup.h long.h double.h \
 case.h
parser.$(OBJEXT): parser.cpp parser.h platform.h tuple.h jikesapi.h \
 lpginput.h stream.h javadef.h javasym.h tab.h lookup.h long.h double.h \
 javaprs.h javaact.h ast.h symbol.h code.h option.h depend.h access.h case.h \
 set.h
platform.$(OBJEXT): platform.cpp platform.h tuple.h jikesapi.h long.h double.h
scanner.$(OBJEXT): scanner.cpp scanner.h platform.h tuple.h jikesapi.h code.h \
 javadef.h javasym.h stream.h tab.h lookup.h long.h double.h control.h \
 option.h symbol.h depend.h access.h case.h set.h error.h
segment.$(OBJEXT): segment.cpp segment.h platform.h tuple.h jikesapi.h
set.$(OBJEXT): set.cpp set.h platform.h tuple.h jikesapi.h symbol.h code.h \
 stream.h javadef.h javasym.h tab.h lookup.h long.h double.h option.h \
 depend.h access.h case.h
stream.$(OBJEXT): stream.cpp stream.h platform.h tuple.h jikesapi.h javadef.h \
 javasym.h tab.h lookup.h long.h double.h code.h zip.h unzip.h \
 symbol.h option.h depend.h access.h case.h control.h set.h semantic.h \
 ast.h diagnose.h parser.h lpginput.h javaprs.h javaact.h error.h
symbol.$(OBJEXT): symbol.cpp symbol.h platform.h tuple.h jikesapi.h code.h \
 stream.h javadef.h javasym.h tab.h lookup.h long.h double.h option.h \
 depend.h access.h case.h control.h set.h ast.h semantic.h diagnose.h \
 parser.h lpginput.h javaprs.h javaact.h error.h table.h zip.h unzip.h
system.$(OBJEXT): system.cpp platform.h tuple.h jikesapi.h control.h option.h \
 code.h symbol.h stream.h javadef.h javasym.h tab.h lookup.h long.h \
 double.h depend.h access.h case.h set.h semantic.h ast.h diagnose.h \
 parser.h lpginput.h javaprs.h javaact.h error.h zip.h unzip.h
tab.$(OBJEXT): tab.cpp tab.h platform.h tuple.h jikesapi.h
unparse.$(OBJEXT): unparse.cpp ast.h platform.h tuple.h jikesapi.h stream.h \
 javadef.h javasym.h tab.h lookup.h long.h double.h symbol.h code.h \
 option.h depend.h access.h case.h set.h
unzip.$(OBJEXT): unzip.cpp unzip.h platform.h tuple.h jikesapi.h
zip.$(OBJEXT): zip.cpp zip.h platform.h tuple.h jikesapi.h unzip.h control.h \
 option.h code.h symbol.h stream.h javadef.h javasym.h tab.h lookup.h \
 long.h double.h depend.h access.h case.h set.h
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
