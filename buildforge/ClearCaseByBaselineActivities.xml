<?xml version="1.0"?>
<!-- (c) Copyright by IBM Corp. and other(s) [2003], 2007 All Rights Reserved. -->
<!DOCTYPE PROJECT_INTERFACE SYSTEM "interface.dtd" >
<PROJECT_INTERFACE IFTYPE="Source" INSTANCE="7.021">
	<template>
		<!-- Template section, these are parsed out of the final xml and used to populate an 
		existing environment group if an instance of this interface is linked with a project.
		However, use the list below to help identify the variables needed to run this interface
		if you are integrating it during a regular BuildForge step.
		-->
		<env name="CurDate" value=".date %d-%b-%y.%H:%M:%S" />
		<env name="LAST_RUN" value="1-Jan-05.00:00:00" />
		<env name="BASELINE" value="BUILD_1"/>
		<env name="VIEW" value="my_adaptor_view" />
		<env name="VOB_PATH" value="\AdaptorVob" />
		<env name="PROJECT_VOB" value="\ProjectVob" />
		<env name="CCSERVER" value="BFServerName" />
		<env name="UNIXCLIENT" value="0"/>
	</template>
	<!-- The 'ByBaseline' entry point will create a new baseline inside your source, and will then diff between the 
	newly crated baseline, and the baseline created during the previous build of the project -->
	<interface>
		<!-- The internal variable 'Changing' is used to store an email template that we will dynamically generate -->
		<setenv name="Changing" value="Source Changes for this Build:\n" type="temp"/>
		<!-- Set some platform specific information -->
		<setenv name="CdCommand" value="cd /view" type="temp" condition="true($UNIXCLIENT==1)"/>
		<setenv name="CdCommand" value="pushd \\view" type="temp" condition="true($UNIXCLIENT==0)"/>
		<setenv name="DirSep" value="/" type="temp" condition="true($UNIXCLIENT==1)"/>
		<setenv name="DirSep" value="\" type="temp" condition="true($UNIXCLIENT==0)"/>
		<!-- cc_baseline is detailed below, but is basically a quick command to create a new baseline. -->
		<run command="cc_baseline" params="$VIEW $VOB_PATH" server="$CCSERVER" dir="/" timeout="360"/>
		<!-- cc_baselineactivities is detailed below but is basically the entry point into the command set to gather change info" -->
		<run command="cc_baselineactivities" params="$BASELINE $VIEW $PROJECT_VOB" server="$CCSERVER" dir="/" timeout="360"/>
		<!-- Here we test to see if we have any changes, 'Changes' should have some data if a change was found -->
		<ontempenv name="Changes" state="empty">
			<!-- No changes, fail the build, default behaviour is pass -->
			<step result="FAIL"/>
		</ontempenv>
		<!-- If we found changes (not failing step), then update our environment for the next run -->
		<onstep result="pass">
			<setenv group="[ADAPTOR]" name="BASELINE" value="$BF_TAG"/>
		</onstep>
		<!-- Set some notifications for when the build completes -->
		<onproject result="fail">
			<notify group="MyChangers" subject="Build $BF_TAG ($CurDate) Failed." message="${Changing}${Changes}"/>
		</onproject>
		<onproject result="pass">
			<notify group="MyChangers" subject="Build $BF_TAG ($CurDate) Passed." message="${Changing}${Changes}"/>
		</onproject>
	</interface>
	<!-- this command creates a baseline named using the Build Tag for the view -->
	<command name="cc_baseline">
		<execute>
cleartool startview $1
$CdCommand${DirSep}$1 &amp;&amp; cleartool mkbl -c "Build $BF_TAG" -full -view $1 $BF_TAG
		</execute>
		<resultsblock/>
	</command>
	<!-- This command lists the activities that occurred between two baselines, 
		it then calls cc_actdescribe to gather further details about the activities -->
	<command name="cc_baselineactivities">
		<execute>
$CdCommand${DirSep}$2 &amp;&amp; cleartool diffbl -act $1@$3 $BF_TAG@$3
		</execute>
		<resultsblock>
			<match pattern="^[->]>\s+([^\s].*?)\s.*$">
				<run command="cc_actdescribe" params="$VIEW $1" server="$CCSERVER" dir="/" timeout="360"/>
			</match>
		</resultsblock>
	</command>
	<!-- This command gathers details about an activity and logs pertinent information to the BuildForge BOM -->
	<command name="cc_actdescribe">
		<execute>
$CdCommand${DirSep}$1 &amp;&amp; cleartool lsact -l $2
		</execute>
		<resultsblock>
			<!-- look for something resempling an activity identifier -->
			<match pattern="^activity\s&quot;(.*?)&quot;$">
				<bom category="Source" section="activities">
					<field name="id" text="$1"/>
				</bom>
			</match>
			<!-- look for an activity owner -->
			<match pattern="owner:\s(.*?\\|)(.*?)$">
				<bom category="Source" section="activities">
					<field name="owner" text="${1}${2}"/>
				</bom>
				<!-- add the user to our list of people who contributed changes to this build -->
				<adduser group="MyChangers" user="$2"/>
			</match>
			<!-- look for some stream information -->
			<match pattern="stream:\s(.*?)$">
				<bom category="Source" section="activities">
					<field name="stream" text="$1"/>
				</bom>
			</match>
			<!-- See if we get a title for this activity -->
			<match pattern="title:\s(.*?)$">
				<bom category="Source" section="activities">
					<field name="title" text="$1"/>
				</bom>
			</match>
			<!-- This identifies any file/directory changes within the activity -->
			<match pattern="^\s+([\\/].*?)\@\@(.*?\d)$">
				<bom category="Source" section="changeset">
					<field name="version" text="$1@@$2"/>
				</bom>
				<!-- add the information to our email template -->
				<setenv name="Changes" value="$1\@\@$2" type="temp append\n"/>
				<!-- and then run cc_diff to log the differences associated with this changed object -->
				<run command="cc_diff" params="$VIEW $1 $2" server="$CCSERVER" dir="/" timeout="360"/>
			</match>
			<!-- Log clearquest info if we get a record -->
			<match pattern="clearquest record id:\s(.*?)$">
				<bom category="Source" section="clearquestinfo">
					<field name="cqid" text="$1"/>
				</bom>
			</match>
			<match pattern="clearquest record State:\s(.*?)$">
				<bom category="Source" section="clearquestinfo">
					<field name="cqstate" text="$1"/>
				</bom>
			</match>
		</resultsblock>
	</command>
	<!-- The cc_diff command does a generic clearcase diff, logging the full output of the diff in the BuildForge BOM -->
	<command name="cc_diff">
		<execute>
$CdCommand${DirSep}$1 &amp;&amp; cleartool diff -pred -diff_format &quot;$2@@$3&quot;
		</execute>
		<resultsblock>
			<match pattern=".+">
				<bom category="Source" section="diff">
					<field name="diff" text="$_"/>
				</bom>
			</match>
		</resultsblock>
	</command>
	<!-- The bomformat sets up the BuildForge BOM display for the information we gather during this interface execution -->
	<!-- A category is a top level expandable item -->
	<bomformat category="Source" title="Source Changes">
		<!-- A section defines the columns for blocks of information, a new row of information is added 
			each time the last field (by order number) in a block is populated with new information -->
		<section name="changes">
			<field order="1" name="file" title="File/Dir Name"/>
			<field order="2" name="version" title="Version"/>
			<field order="3" name="date" title="Date"/>
			<field order="4" name="user" title="User"/>
			<field order="5" name="comment" title="Comment"/>
		</section>
		<section name="activities">
			<field order="1" name="id" title="Activity"/>
			<field order="2" name="owner" title="Owner"/>
			<field order="3" name="stream" title="Stream"/>
			<field order="4" name="title" title="Title"/>
		</section>
		<section name="changeset">
			<field order="1" name="version" title="Change set version"/>
		</section>
		<section name="clearquestinfo">
			<field order="1" name="cqid" title="ClearQuest record ID"/>
			<field order="2" name="cqstate" title="ClearQuest record state"/>
		</section>
		<section name="diff">
			<field name="diff" title="Change Details"/>
		</section>
	</bomformat>
</PROJECT_INTERFACE>
