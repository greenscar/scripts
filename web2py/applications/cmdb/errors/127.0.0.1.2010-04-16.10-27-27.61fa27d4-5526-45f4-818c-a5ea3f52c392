(dp1
S'output'
p2
S''
sS'layer'
p3
S'/opt/web2py/applications/cmdb/controllers/app_instances.py'
p4
sS'code'
p5
S'import datetime\n# coding: utf8\n# try something like\ndef index(): \n   """\n   select * from groups, servers, customers, processes, apps, process_instances si\n   left join app_instances on si.id = app_instances.process_instances_id\n   where servers.id = si.servers_id\n   and si.processes_id = processes.id\n   and customers.id = si.customers_id\n   and app_instances.apps_id = apps.id\n   and groups.id = processes.groups_id\n   and groups.id = 3\n   """\n   if len(request.args) == 1:\n      sort_by = request.args(0)\n      if cmp(sort_by, "group_name") == 0:\n         order_by = db.groups.name|db.processes.name\n         #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.groups.name|db.processes.name, groupby=db.apps.id)\n      elif cmp(sort_by, "service_name") == 0:\n         order_by=db.processes.name|db.groups.name|db.apps.name\n         #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.processes.name|db.groups.name|db.apps.name, groupby=db.apps.id)\n      elif cmp(sort_by, "app_name") == 0:\n         order_by=db.apps.name|db.groups.name|db.processes.name\n         #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.name|db.groups.name|db.processes.name, groupby=db.apps.id)\n      elif cmp(sort_by, "mbean") == 0:\n         order_by=db.apps.mbean\n         #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.mbean, groupby=db.apps.id)\n      elif cmp(sort_by, "alive_check") == 0:\n         order_by=db.apps.alive_check\n         #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.alive_check, groupby=db.apps.id)\n   else:\n      order_by=db.groups.name|db.processes.name\n      #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.groups.name|db.processes.name, groupby=db.apps.id)\n      #ai = db(db.groups.id = db.processes.groups_id).select(db.customers.ALL, db.app_instances.ALL, db.process_instances.ALL, db.processes.ALL, db.app.ALL, db.groups.ALL,\n         \n   print("order_by = " + str(order_by))\n   #start = datetime.datetime.now()\n   instances = db((db.servers.id == db.process_instances.servers_id)\n                 &\n                 (db.customers.id == db.process_instances.customers_id)\n                 &\n                 (db.app_instances.apps_id == db.apps.id)\n                 &\n                 (db.app_instances.process_instances_id == db.process_instances.id)\n                 &\n                 (db.process_instances.processes_id == db.processes.id)\n                 &\n                 (db.groups.id == db.processes.groups_id)).select(\n                     db.groups.ALL, db.servers.ALL, db.customers.ALL, db.processes.ALL, db.apps.ALL, db.process_instances.ALL, db.app_instances.ALL,\n                     #left=(db.app_instances.on(db.process_instances.id == db.app_instances.process_instances_id)),\n                     orderby=order_by)\n   #print("__________")\n   #print(db._lastsql)\n   #print("__________")\n   #\n   # LEFT JOIN IS NOT WORKING CORRECTLY IN WEB2PY. THEREFORE, WE MUST LOAD THE DB AS A SECOND QUERY RATHER THAN ONE LONG QUERY.\n   #\n   print("++++++++++++++++++++++++++++++++++++++")\n   for i in instances:\n      rs = db(db.app_instances.id == i.app_instances.id).select(db.app_instances.ALL, db.dbs.ALL,\n            left=(db.dbs_to_app_instances.on(db.app_instances.id == db.dbs_to_app_instances.app_instances_id),\n                db.dbs.on(db.dbs.id == db.dbs_to_app_instances.dbs_id)\n                ))[0]\n      i.dbs = rs.dbs\n   print("++++++++++++++++++++++++++++++++++++++")\n   return dict(instances=instances)\n   \ndef edit():\n   print("app_instances.edit")\n   if(len(request.args) == 1 & request.args(0).isdigit()):\n      print("args = " + request.args[0])\n      instance = db_load_instance(request.args[0])\n      process_completed = False\n      #service_instance_options [OPTION(service_\n      #app_options = [OPTION(app.name, _value=app.id) for app in db().select(db.apps.id, db.apps.name)]\n      db_options = [OPTION(database.name, _value=database.id) for database in db().select(db.dbs.id, db.dbs.name)]\n      form = FORM(TABLE(\n                        TR(TH(H2(\'Modify \' + instance.processes.name + " " + instance.apps.name), _colspan=2, _align=\'center\')),\n                        TR(\'Service \', instance.processes.name),\n                        TR(\'App \', instance.apps.name),\n                        TR(\'Server \', instance.servers.name),\n                        TR(\'DB \', SELECT(db_options, value=instance.dbs.id, _name="dbs_id")),\n                        TR("",(INPUT(_type="submit", _value="Submit"), " ", INPUT(_type="button", _value="Cancel", _onclick="parent.location=\'" + URL(r=request, f=\'index\') + "\'")))\n                        \n                       )\n                 )\n               \n      if(not process_completed):\n         return dict(form=form)            \n      \n      \ndef db_load_instance(app_instance_id):\n   print("db_load_instance(" + app_instance_id + ")")\n   instances = db(\n                    (db.app_instances.id == app_instance_id)\n                  & (db.process_instances.servers_id == db.servers.id)\n                  & (db.processes.id == db.process_instances.processes_id)\n                  & (db.process_instances.customers_id == db.customers.id)\n                  & (db.groups.id == db.processes.groups_id)\n                  #& ((db.process_instances.id == db.db_2_process_instances.process_instances_id) & (db.dbs.id == db.db_2_process_instances.dbs_id))\n                  & ((db.app_instances.apps_id == db.apps.id) & (db.app_instances.process_instances_id == db.process_instances.id))\n                 ).select(\n                           db.app_instances.ALL,\n                           db.apps.ALL,\n                           db.process_instances.ALL,\n                           db.processes.ALL,\n                           db.servers.ALL, \n                           db.customers.ALL,\n                           db.processes.ALL, \n                           #db.dbs.ALL,\n                           db.groups.ALL,\n                           #left=(db.app_instances.on(db.process_instances.id == db.app_instances.process_instances_id)),\n                           groupby=db.apps.id\n                         )\n   print("--------------")\n   print(db._lastsql)\n   print("--------------")\n   return instances[0]\nresponse._vars=response._caller(edit)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/opt/web2py/applications/cmdb/controllers/app_instances.py", line 120, in <module>\n  File "/opt/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/web2py/applications/cmdb/controllers/app_instances.py", line 83, in edit\n    TR(\'DB \', SELECT(db_options, value=instance.dbs.id, _name="dbs_id")),\n  File "/opt/web2py/gluon/sql.py", line 665, in __getattr__\n    return dict.__getitem__(self,key)\nKeyError: \'dbs\'\n'
p8
s.