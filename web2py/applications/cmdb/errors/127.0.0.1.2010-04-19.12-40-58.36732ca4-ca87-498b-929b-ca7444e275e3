(dp1
S'output'
p2
S''
sS'layer'
p3
S'/opt/web2py/applications/cmdb/controllers/apps.py'
p4
sS'code'
p5
S'import MySQLdb\nimport time\nimport re\ndef index():\n   if len(request.args) == 1:\n      sort_by = request.args(0)\n      if cmp(sort_by, "group_name") == 0:\n         processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.groups.name|db.processes.name, groupby=db.apps.id)\n      elif cmp(sort_by, "service_name") == 0:\n         processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.processes.name|db.groups.name|db.apps.name, groupby=db.apps.id)\n      elif cmp(sort_by, "app_name") == 0:\n         processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.name|db.groups.name|db.processes.name, groupby=db.apps.id)\n      elif cmp(sort_by, "mbean") == 0:\n         processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.mbean, groupby=db.apps.id)\n      elif cmp(sort_by, "alive_check") == 0:\n         processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.alive_check, groupby=db.apps.id)\n   else:\n      processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.groups.name|db.processes.name, groupby=db.apps.id)\n   return dict(processes=processes)\n   \ndef edit():\n   \n   if (request.vars.group_name):\n      print("new group name = " + group_name)\n   elif ((len(request.args) == 1) & (request.args(0).isdigit())):\n      # Load all groups\n      group_options = [OPTION(group.name, _value=group.id) for group in db().select(db.groups.id, db.groups.name)]\n      # Load all processes\n      process_options = [OPTION(service.name, _value=service.id) for service in db().select(db.processes.id, db.processes.name)]\n      # Load details of provided app\n      processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id) & (db.apps.id == request.args(0))).select(orderby=db.groups.name|db.processes.name, groupby=db.apps.id)\n      thisprocess=processes[0]\n      #print("---------------------------------------")\n      #print(thisprocess)\n      #for row in thisprocess:\n      #   print(row.groups.id)\n      #print("---------------------------------------")\n      form = FORM(TABLE(\n                        TR(TH(H2(\'Modify \' + thisprocess.apps.name), _colspan=3, _align=\'center\')),\n                        TR(\'Group: \', SELECT(group_options, value=thisprocess.groups.id,_name="group_id")),\n                        TR(\'Process: \', SELECT(process_options, value=thisprocess.processes.id,_name="process_id")),\n                        TR(\'App: \', INPUT(_type=\'text\', _name=\'app_name\', value=thisprocess.apps.name, _size=50)),\n                        TR(\'MBEAN: \', INPUT(_type=\'text\', _name=\'mbean\', value=thisprocess.apps.mbean, _size=50)),\n                        TR(\'Alive Check: \', INPUT(_type=\'text\', _name=\'alivecheck\', value=thisprocess.apps.alive_check, _size=50)),\n                        TR("",INPUT(_type="submit", _value="SUBMIT"))\n                       )\n                 )\n      return dict(form=form)\n      #return dict(groups=group_options, processes=process_options, thisprocess=thisprocess[0])\n   else:\n      redirect(URL(r=request, f=\'index\'))\n      \n      \ndef add():\n   print("apps.add")\n   group_options = [OPTION("SELECT", _value="SELECT")] + [OPTION(group.name, _value=group.id) for group in db().select(db.groups.id, db.groups.name)]\n   process_options = [OPTION("SELECT", _value="SELECT")] + [OPTION(process.name, _value=process.id) for process in db().select(db.processes.id, db.processes.name)]\n   if(request.vars):\n      print("process form")\n      curtime = MySQLdb.TimestampFromTicks(time.time())\n      group_id = request.vars.group_id\n      process_id = request.vars.process_id\n      app_name = request.vars.app_name\n      mbean = request.vars.mbean\n      alive_check = request.vars.alivecheck\n      if(group_id == "SELECT"):\n         response.flash = "Please select a Group."\n      elif(process_id == "SELECT"):\n         response.flash = "Please select a Process."\n      elif(app_name and not re.search("^\\w[\\w\\s]*\\w$", app_name)):\n         response.flash = "App Name must start and end with a character and can only contain nums, chars, & _"\n      form = FORM(TABLE(\n                        TR(TH(H2(\'Create an App\'), _colspan=3, _align=\'center\')),\n                        TR(\'Group: \', SELECT(group_options, value=thisprocess.groups.id,_name="group_id")),\n                        TR(\'Process: \', SELECT(process_options, value=thisprocess.processes.id,_name="process_id")),\n                        TR(\'App: \', INPUT(_type=\'text\', _name=\'app_name\', value=thisprocess.apps.name, _size=50)),\n                        TR(\'MBEAN: \', INPUT(_type=\'text\', _name=\'mbean\', value=thisprocess.apps.mbean, _size=50)),\n                        TR(\'Alive Check: \', INPUT(_type=\'text\', _name=\'alivecheck\', value=thisprocess.apps.alive_check, _size=50)),\n                        TR("",INPUT(_type="submit", _value="SUBMIT"))\n                       )\n                 )\n      \n      \n   else:\n      form = FORM(TABLE(\n                        TR(TH(H2(\'Create an App\'), _colspan=3, _align=\'center\')),\n                        TR(\'Group: \', SELECT(group_options, _name="group_id")),\n                        TR(\'Process: \', SELECT(process_options, _name="process_id")),\n                        TR(\'App Name: \', INPUT(_type=\'text\', _name=\'app_name\', _size=50)),\n                        TR(\'MBean: \', INPUT(_type=\'text\', _name=\'mbean\', _size=50)),\n                        TR(\'Alive Check: \', INPUT(_type=\'text\', _name=\'alivecheck\')),\n                        TR("",INPUT(_type="submit", _value="SUBMIT"))\n                       )\n                 )\n      return dict(form=form)\n      \n#form = FORM(TABLE(TR(\'Search in category\', SELECT(\\*category_options,\n#\\*\\*dict(_name="search_category",requires=IS_IN_DB(db,\'categories.id\')))),\n#TR("",INPUT(_type="submit",_value="SEARCH"))))\n\nresponse._vars=response._caller(add)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/opt/web2py/applications/cmdb/controllers/apps.py", line 101, in <module>\n  File "/opt/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/web2py/applications/cmdb/controllers/apps.py", line 74, in add\n    TR(\'Group: \', SELECT(group_options, value=thisprocess.groups.id,_name="group_id")),\nNameError: global name \'thisprocess\' is not defined\n'
p8
s.