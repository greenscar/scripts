(dp1
S'output'
p2
S''
sS'layer'
p3
S'/opt/web2py/applications/cmdb/controllers/apps.py'
p4
sS'code'
p5
S'import MySQLdb\nimport time\nimport re\ndef index():\n   if len(request.args) == 1:\n      sort_by = request.args(0)\n      if cmp(sort_by, "group_name") == 0:\n         processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.groups.name|db.processes.name, groupby=db.apps.id)\n      elif cmp(sort_by, "service_name") == 0:\n         processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.processes.name|db.groups.name|db.apps.name, groupby=db.apps.id)\n      elif cmp(sort_by, "app_name") == 0:\n         processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.name|db.groups.name|db.processes.name, groupby=db.apps.id)\n      elif cmp(sort_by, "mbean") == 0:\n         processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.mbean, groupby=db.apps.id)\n      elif cmp(sort_by, "alive_check") == 0:\n         processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.alive_check, groupby=db.apps.id)\n   else:\n      processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.groups.name|db.processes.name, groupby=db.apps.id)\n   return dict(processes=processes)\n      \ndef edit():\n   print("apps.edit")\n   apps = db((db.processes.id == db.apps.processes_id) & (db.apps.id == request.args(0))).select(db.apps.ALL, db.processes.ALL, groupby=db.apps.id)\n   thisapp=apps[0]\n   print(thisapp)\n   if ((len(request.args) == 1) & (request.args(0).isdigit())):\n      if(request.vars):\n         print("--------------- process form ---------------")\n         process_id = request.vars.process_id\n         app_name = request.vars.app_name\n         mbean_val = request.vars.mbean\n         alivecheck = request.vars.alivecheck\n         if(not re.search("^/d+$", process_id)):\n            response.flash = "Please select a Process."\n         elif((not app_name)):\n            response.flash = "Please define the App name."\n         if(response.flash):\n            group_options = [OPTION("NONE", _value="NONE")] + [OPTION(group.name, _value=group.id) for group in db().select(db.groups.id, db.groups.name)]\n            process_options = [OPTION("NONE", _value="NONE")] + [OPTION(process.name, _value=process.id) for process in db().select(db.processes.id, db.processes.name)]\n            form = FORM(TABLE(\n                              TR(TH(H2(\'Modify\' + thisapp.name), _colspan=3, _align=\'center\')),\n                              #TR(\'Group: \', SELECT(group_options, value=group_id,_name="group_id")),\n                              TR(\'Process: \', SELECT(process_options, value=process_id,_name="process_id")),\n                              TR(\'App: \', INPUT(_type=\'text\', _name=\'app_name\', value=app_name, _size=50)),\n                              TR(\'MBEAN: \', INPUT(_type=\'text\', _name=\'mbean\', value=mbean_val, _size=50)),\n                              TR(\'Alive Check: \', INPUT(_type=\'text\', _name=\'alivecheck\', value=alivecheck, _size=50)),\n                              TR(\'Delete \', INPUT(_type="checkbox", _name="delete", _onclick="return confirm(\'Are you sure you want to delete " + thisapp.name + "?\');")),\n                              TR("",INPUT(_type="submit", _value="SUBMIT"))\n                             )\n                       )\n            return dict(form=form)\n         else:\n            # INSERT IT INTO THE DB\n            curtime = MySQLdb.TimestampFromTicks(time.time())\n            print("Update app id " + str(thisapp.apps.id) + " in db")\n            db(db.apps.id == thisapp.apps.id).update(name = app_name, \n                                                mbean = mbean_val, \n                                                alive_check = alivecheck, \n                                                processes_id = process_id,\n                                                updated_at = curtime)\n            print("--------------")\n            print(db._lastsql)\n            print("--------------")\n            print("Service Instance successfully inserted into DB")\n            redirect(URL(r=request, f=\'index\'))\n            return(dict())\n      else:\n      \n         # Load all groups\n         group_options = [OPTION(group.name, _value=group.id) for group in db().select(db.groups.id, db.groups.name)]\n         # Load all processes\n         process_options = [OPTION(service.name, _value=service.id) for service in db().select(db.processes.id, db.processes.name)]\n         # Load details of provided app\n         form = FORM(TABLE(\n                           TR(TH(H2(\'Modify \' + thisapp.apps.name), _colspan=3, _align=\'center\')),\n                           #TR(\'Group: \', SELECT(group_options, value=thisapp.groups.id,_name="group_id")),\n                           TR(\'Process: \', SELECT(process_options, value=thisapp.processes.id,_name="process_id")),\n                           TR(\'App: \', INPUT(_type=\'text\', _name=\'app_name\', value=thisapp.apps.name, _size=50)),\n                           TR(\'MBEAN: \', INPUT(_type=\'text\', _name=\'mbean\', value=thisapp.apps.mbean, _size=50)),\n                           TR(\'Alive Check: \', INPUT(_type=\'text\', _name=\'alivecheck\', value=thisapp.apps.alive_check, _size=50)),\n                              TR(\'Delete \', INPUT(_type="checkbox", _name="delete", _onclick="return confirm(\'Are you sure you want to delete " + thisapp.name + "?\');")),\n                           TR("",INPUT(_type="submit", _value="SUBMIT"))\n                          )\n                    )\n         return dict(form=form)\n         #return dict(groups=group_options, processes=process_options, thisapp=thisapp[0])\n   else:\n      redirect(URL(r=request, f=\'index\'))\n      \n      \ndef add():\n   print("apps.add")\n   if(request.vars):\n      print("process form")\n      process_id = request.vars.process_id\n      app_name = request.vars.app_name\n      mbean_val = request.vars.mbean\n      alivecheck = request.vars.alivecheck\n      if(not re.search("^/d+$", process_id)):\n         response.flash = "Please select a Process."\n      elif((not app_name)):\n         response.flash = "Please define the App name."\n      if(response.flash):\n         #group_options = [OPTION("NONE", _value="NONE")] + [OPTION(group.name, _value=group.id) for group in db().select(db.groups.id, db.groups.name)]\n         process_options = [OPTION("NONE", _value="NONE")] + [OPTION(process.name, _value=process.id) for process in db().select(db.processes.id, db.processes.name)]\n         form = FORM(TABLE(\n                           TR(TH(H2(\'Create an App\'), _colspan=3, _align=\'center\')),\n                           #TR(\'Group: \', SELECT(group_options, value=group_id,_name="group_id")),\n                           TR(\'Process: \', SELECT(process_options, value=process_id,_name="process_id")),\n                           TR(\'App: \', INPUT(_type=\'text\', _name=\'app_name\', value=app_name, _size=50)),\n                           TR(\'MBEAN: \', INPUT(_type=\'text\', _name=\'mbean\', value=mbean_val, _size=50)),\n                           TR(\'Alive Check: \', INPUT(_type=\'text\', _name=\'alivecheck\', value=alivecheck, _size=50)),\n                           TR("",INPUT(_type="submit", _value="SUBMIT"))\n                          )\n                    )\n         return dict(form=form)\n      else:\n         # INSERT IT INTO THE DB\n         curtime = MySQLdb.TimestampFromTicks(time.time())\n         print("insert it into the db")\n         db.apps.insert(name = app_name,\n                        mbean = mbean_val,\n                        alive_check = alivecheck,\n                        processes_id = process_id,\n                        created_at = curtime,\n                        updated_at = curtime)\n         print("--------------")\n         print(db._lastsql)\n         print("--------------")\n         print("Service Instance successfully inserted into DB")\n         redirect(URL(r=request, f=\'index\'))\n         return(dict())\n   else:\n      #group_options = [OPTION("NONE", _value="NONE")] + [OPTION(group.name, _value=group.id) for group in db().select(db.groups.id, db.groups.name)]\n      process_options = [OPTION("NONE", _value="NONE")] + [OPTION(process.name, _value=process.id) for process in db().select(db.processes.id, db.processes.name)]\n      form = FORM(TABLE(\n                        TR(TH(H2(\'Create an App\'), _colspan=3, _align=\'center\')),\n                        #TR(\'Group: \', SELECT(group_options, _name="group_id")),\n                        TR(\'Process: \', SELECT(process_options, _name="process_id")),\n                        TR(\'App Name: \', INPUT(_type=\'text\', _name=\'app_name\', _size=50)),\n                        TR(\'MBean: \', INPUT(_type=\'text\', _name=\'mbean\', _size=50)),\n                        TR(\'Alive Check: \', INPUT(_type=\'text\', _name=\'alivecheck\')),\n                        TR("",INPUT(_type="submit", _value="SUBMIT"))\n                       )\n                 )\n      return dict(form=form)\n      \n      \n      \ndef has_child_rows(app_id):\n   app_instancesrs = db(db.app_instances.apps_id == app_id).select()\n   if(app_instancesrs):\n      return True\n   else:\n      return False\n         \n\nresponse._vars=response._caller(edit)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/opt/web2py/applications/cmdb/controllers/apps.py", line 158, in <module>\n  File "/opt/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/web2py/applications/cmdb/controllers/apps.py", line 81, in edit\n    TR(\'Delete \', INPUT(_type="checkbox", _name="delete", _onclick="return confirm(\'Are you sure you want to delete " + thisapp.name + "?\');")),\n  File "/opt/web2py/gluon/sql.py", line 665, in __getattr__\n    return dict.__getitem__(self,key)\nKeyError: \'name\'\n'
p8
s.