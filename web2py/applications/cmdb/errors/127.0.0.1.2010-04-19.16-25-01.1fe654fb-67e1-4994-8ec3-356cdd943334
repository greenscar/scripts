(dp1
S'output'
p2
S''
sS'layer'
p3
S'/opt/web2py/applications/cmdb/controllers/app_instances.py'
p4
sS'code'
p5
S'import MySQLdb\nimport time\nimport re\n# coding: utf8\n# try something like\ndef index(): \n   if len(request.args) == 1:\n      sort_by = request.args(0)\n      if cmp(sort_by, "group_name") == 0:\n         order_by = db.groups.name|db.processes.name\n         #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.groups.name|db.processes.name, groupby=db.apps.id)\n      elif cmp(sort_by, "service_name") == 0:\n         order_by=db.processes.name|db.groups.name|db.apps.name\n         #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.processes.name|db.groups.name|db.apps.name, groupby=db.apps.id)\n      elif cmp(sort_by, "app_name") == 0:\n         order_by=db.apps.name|db.groups.name|db.processes.name\n         #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.name|db.groups.name|db.processes.name, groupby=db.apps.id)\n      elif cmp(sort_by, "mbean") == 0:\n         order_by=db.apps.mbean\n         #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.mbean, groupby=db.apps.id)\n      elif cmp(sort_by, "alive_check") == 0:\n         order_by=db.apps.alive_check\n         #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.apps.alive_check, groupby=db.apps.id)\n      elif cmp(sort_by, "client") == 0:\n         order_by = db.customers.name, db.apps.name\n      else:\n         order_by = db.app_instances.id\n   else:\n      #order_by=db.groups.name|db.processes.name\n      order_by = db.app_instances.id\n      #processes = db((db.groups.id == db.processes.groups_id) & (db.processes.id == db.apps.processes_id)).select(orderby=db.groups.name|db.processes.name, groupby=db.apps.id)\n      #ai = db(db.groups.id = db.processes.groups_id).select(db.customers.ALL, db.app_instances.ALL, db.process_instances.ALL, db.processes.ALL, db.app.ALL, db.groups.ALL,\n         \n   print("order_by = " + str(order_by))\n   #start = datetime.datetime.now()\n   instances = db((db.servers.id == db.process_instances.servers_id)\n                 &\n                 (db.customers.id == db.process_instances.customers_id)\n                 &\n                 (db.app_instances.apps_id == db.apps.id)\n                 &\n                 (db.app_instances.process_instances_id == db.process_instances.id)\n                 &\n                 (db.process_instances.processes_id == db.processes.id)\n                 &\n                 (db.groups.id == db.processes.groups_id)).select(\n                     db.groups.ALL, db.servers.ALL, db.customers.ALL, db.processes.ALL, db.apps.ALL, db.process_instances.ALL, db.app_instances.ALL,\n                     #left=(db.app_instances.on(db.process_instances.id == db.app_instances.process_instances_id)),\n                     orderby=order_by)\n   #print("__________")\n   #print(db._lastsql)\n   #print("__________")\n   #\n   # LEFT JOIN IS NOT WORKING CORRECTLY IN WEB2PY. THEREFORE, WE MUST LOAD THE DB AS A SECOND QUERY RATHER THAN ONE LONG QUERY.\n   #\n   print("++++++++++++++++++++++++++++++++++++++")\n   for i in instances:\n      rs = db(db.app_instances.id == i.app_instances.id).select(db.app_instances.ALL, db.dbs.ALL,\n            left=(db.dbs_to_app_instances.on(db.app_instances.id == db.dbs_to_app_instances.app_instances_id),\n                db.dbs.on(db.dbs.id == db.dbs_to_app_instances.dbs_id)\n                ))[0]\n      i.dbs = rs.dbs\n   print("++++++++++++++++++++++++++++++++++++++")\n   return dict(instances=instances)\n   \ndef edit():\n   print("app_instances.edit")\n   if(len(request.args) == 1 & request.args(0).isdigit()):\n      print("args = " + request.args[0])\n      instance = db_load_instance(request.args[0])\n      print(instance)\n      if(not instance):\n         redirect(URL(r=request, f=\'index\'))\n         return(dict())         \n      elif(request.vars):\n         print("-------------- process form ------------------")\n         dbid = request.vars.dbs_id\n         print(request.vars)\n         dbs_to_app_instances_id = request.vars.dbs_to_app_instances_id\n         print("dbs_to_app_instances_id = \'" + str(dbs_to_app_instances_id) + "\'")\n         \n         if((dbid == "SELECT") & (not re.search("^0$", dbs_to_app_instances_id)):\n               print("DELETE THE ROW")\n               #DELETE THE ROW FROM DBS_TO_APP_INSTANCES\n               db(db.dbs_to_app_instances.id == dbs_to_app_instances_id).delete()\n         else:\n            curtime = MySQLdb.TimestampFromTicks(time.time())\n            print("Update app_instance id " + str(instance.app_instances.id))\n            print("dbs_to_app_instances_id = " + dbs_to_app_instances_id)\n            if(re.search("^0$", dbs_to_app_instances_id)):\n               print("INSERT NEW ROW")\n               # INSERT NEW ROW\n               db.dbs_to_app_instances.insert(dbs_id = dbid, app_instances_id = request.args(0), created_at = curtime, updated_at = curtime)\n            else:\n               print("UPDATE EXISTING ROW")\n               # UPDATE EXISTING ROW\n               print("dbs_to_app_instances_id = " + str(dbs_to_app_instances_id))\n               db(db.dbs_to_app_instances.id == dbs_to_app_instances_id).update(dbs_id = dbid, updated_at = curtime)\n            #db(db.app_instances.id = instance.app_instances.id).update(dbs_id = dbid)\n         print("--------------")\n         print(db._lastsql)\n         print("--------------")\n         print("App Instance successfully updated in DB")\n         redirect(URL(r=request, f=\'index\'))\n         return(dict())\n      else:\n         db_options = [OPTION("SELECT", _value="SELECT")] + [OPTION(database.name, _value=database.id) for database in db().select(db.dbs.id, db.dbs.name)]\n         print("dbs.id = " + str(instance.dbs.id))\n         if instance.dbs.id:\n            dbval = instance.dbs.id\n         else:\n            dbval = "SELECT"\n         if(instance.dbs_to_app_instances.id):\n            dbs_to_app_instances_id = instance.dbs_to_app_instances.id\n         else:\n            dbs_to_app_instances_id = 0\n         form = FORM(\n                      INPUT(_type="hidden", _name="dbs_to_app_instances_id", _value=dbs_to_app_instances_id),\n                      TABLE(\n                           TR(TH(H2(\'Modify \' + instance.processes.name + " " + instance.apps.name), _colspan=2, _align=\'center\')),\n                           TR(\'Service \', instance.processes.name),\n                           TR(\'App \', instance.apps.name),\n                           TR(\'Server \', instance.servers.name),\n                           TR(\'DB \', SELECT(db_options, value=dbval, _name="dbs_id")),\n                           TR("",(INPUT(_type="submit", _value="Submit"), " ", INPUT(_type="button", _value="Cancel", _onclick="parent.location=\'" + URL(r=request, f=\'index\') + "\'")))                           \n                          )\n                    )         \n         return(dict(form=form))\n   else:\n      redirect(URL(r=request, f=\'index\'))\n      return(dict())\n      \ndef db_load_instance(app_instance_id):\n   print("db_load_instance(" + app_instance_id + ")")\n   instance = db(\n                    (db.app_instances.id == app_instance_id)\n                  & (db.process_instances.servers_id == db.servers.id)\n                  & (db.processes.id == db.process_instances.processes_id)\n                  & (db.process_instances.customers_id == db.customers.id)\n                  & (db.groups.id == db.processes.groups_id)\n                  #& ((db.process_instances.id == db.db_2_process_instances.process_instances_id) & (db.dbs.id == db.db_2_process_instances.dbs_id))\n                  & ((db.app_instances.apps_id == db.apps.id) & (db.app_instances.process_instances_id == db.process_instances.id))\n                 ).select(\n                           db.app_instances.ALL,\n                           db.apps.ALL,\n                           db.process_instances.ALL,\n                           db.processes.ALL,\n                           db.servers.ALL, \n                           db.customers.ALL,\n                           db.processes.ALL, \n                           #db.dbs.ALL,\n                           db.groups.ALL,\n                           left=(\n                                    db.process_instances.on(db.process_instances.id == db.app_instances.process_instances_id)\n                                ), \n                           groupby=db.apps.id\n                           )[0]\n   #print(instance)\n   #print("--------------")\n   #print("load db")\n   # Load DB\n   #print("--------------")\n   rs = db(db.app_instances.id == instance.app_instances.id).select(db.app_instances.ALL, db.dbs.ALL, db.dbs_to_app_instances.ALL,\n         left=(db.dbs_to_app_instances.on(db.app_instances.id == db.dbs_to_app_instances.app_instances_id),\n             db.dbs.on(db.dbs.id == db.dbs_to_app_instances.dbs_id)\n             ))[0]\n   \n   instance.dbs = rs.dbs\n   instance.dbs_to_app_instances = rs.dbs_to_app_instances\n   print("--------------======================-------------")\n   print(rs.dbs_to_app_instances)\n   print("--------------======================-------------")\n   #print("--------------")\n   #\n   #print("--------------")\n   #print(db._lastsql)\n   #print("--------------")\n   return instance\nresponse._vars=response._caller(edit)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 171, in restricted\n    ccode = compile(code.replace(\'\\r\\n\', \'\\n\'), layer, \'exec\')\n  File "/opt/web2py/applications/cmdb/controllers/app_instances.py", line 82\n    if((dbid == "SELECT") & (not re.search("^0$", dbs_to_app_instances_id)):\n                                                                           ^\nSyntaxError: invalid syntax\n'
p8
s.