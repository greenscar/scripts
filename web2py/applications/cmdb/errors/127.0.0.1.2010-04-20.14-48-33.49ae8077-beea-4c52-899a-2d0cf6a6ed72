(dp1
S'output'
p2
S''
sS'layer'
p3
S'/opt/web2py/applications/cmdb/controllers/processes.py'
p4
sS'code'
p5
S'import MySQLdb\nimport time\nimport re\n# coding: utf8\n# try something like\ndef index(): \n   if len(request.args) == 1:\n      sort_by = request.args(0)\n      if cmp(sort_by, "friendly") == 0:\n            sort_by = db.processes.name_friendly\n      elif cmp(sort_by, "process") == 0:\n         sort_by = db.processes.name\n      elif cmp(sort_by, "group") == 0:\n         sort_by = db.groups.name\n      else:\n         sort_by = db.processes.name\n   else:\n      sort_by = db.groups.name\n   processes = db((db.processes.groups_id == db.groups.id)).select(db.processes.ALL, db.groups.ALL, orderby=sort_by)\n   return dict(processes=processes)\n   \ndef edit_CRUD():\n   print("processes.edit")\n   if(request.args):\n      row = db(db.processes.id == request.args[0]).select()[0]\n      print(str(row))\n      if(has_child_rows(row.id)):\n         form = SQLFORM(db.processes, row, deletable=False)\n      else:\n         form = SQLFORM(db.processes, row, deletable=True)\n         \n      if form.accepts(request.vars, session):\n         if process_name_exists(request.vars.process_name):\n            response.flash=request.vars.process_name + " process already exists"\n            return dict(form=form)\n         else:\n            curtime = MySQLdb.TimestampFromTicks(time.time())\n            db(db.processes.id == request.vars.process_id).update(name=request.vars.process_name, updated_at=curtime)\n            redirect(URL(r=request, f=\'index\'))\n      elif form.errors:\n         response.flash=\'Errors in your form.\'\n      else:\n         response.flash=\'Please complete the form\'\n      print(str(form))\n      return dict(form=form)\n   else:\n      redirect(URL(r=request, f=\'index\'))\n      \ndef edit():\n   print("processes.edit")\n   if(len(request.args) == 1 & request.args(0).isdigit()):\n      # A NUMBER HAS BEEN PROVIDED IN PATH WITH REGARDS TO PROCESS\n      print(request.args(0))\n      try:\n         processes = db(db.processes.id == request.args(0)).select(db.processes.ALL)\n         thisprocess = processes[0]\n      except:\n         redirect(URL(r=request, f=\'index\'))\n      group_options = [OPTION("NONE", _value="NONE")] + [OPTION(group.name, _value=group.id) for group in db().select(db.groups.id, db.groups.name)]\n      if(request.vars):\n         # THE FORM HAS BEEN FILLED OUT & SUBMITTED. PROCESS\n         form = FORM(\n                     TABLE(\n                           TR(TH(H2(\'Modify \' + thisprocess.name + \' process\'), _colspan=2, _align=\'center\')),\n                           TR(\'Name:\', INPUT(_type=\'text\', _name=\'process_name\', value=request.vars.process_name, _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name cannot be blank.\')))),\n                           TR(\'Name Friendly:\', INPUT(_type=\'text\', _name=\'process_name_friendly\', value=request.vars.process_name_friendly, _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name Friendly cannot be blank.\')))),\n                           TR(\'Group:\', SELECT(group_options, value=request.vars.group_id, _name="group_id")),\n                           TR(\'Delete \', INPUT(_type="checkbox", _name="delete", _onclick="return confirm(\'Are you sure you want to delete " + thisprocess.name + "?\');")),\n                           TR(INPUT(_type=\'submit\', _value=\'SUBMIT\'))\n                          )\n                     )\n         if(request.vars.delete is not None):\n            # USER HAS DECIDED TO DELETE.\n            if(has_child_rows(thisprocess.id)):\n               response.flash = "This process has child apps. You cannot delete a process with child apps."\n               return(dict(form=form))\n            else:\n               db(db.processes.id == thisprocess.id).delete()\n               redirect(URL(r=request,f=\'index\'))\n               return(dict())\n         # USER DOES NOT WANT TO DELETE. PROCESS MODIFICATION\n         if(not request.vars.process_name):\n            response.flash = "Please define a Name"\n         elif(process_name_exists(request.vars.process_name, thisprocess.id)):\n            response.flash = "The process name you entered already exists. Please enter a new name."      \n         elif(not request.vars.process_name_friendly):\n            response.flash = "Please define a friendly name"\n         elif(not re.search(\'^\\d+$\', request.vars.group_id)):\n            response.flash = "Please select a group"\n         if(response.flash):\n            # THERE WAS SOMETHING WRONG WITH THE FORM. SEND USER BACK.\n            return dict(form=form)\n         else:\n            # THE FORM WAS GOOD. PROCESS MODIFICATION\n            curtime = MySQLdb.TimestampFromTicks(time.time())\n            db(db.processes.id == thisprocess.id).update(name = request.vars.process_name,\n                                                         name_friendly = request.vars.process_name_friendly,\n                                                         groups_id = request.vars.group_id,\n                                                         updated_at = curtime)\n            redirect(URL(r=request, f=\'index\'))\n      else:\n         form = FORM(\n                     TABLE(\n                           TR(TH(H2(\'Modify \' + thisprocess.name + \' process\'), _colspan=2, _align=\'center\')),\n                           TR(\'Name:\', INPUT(_type=\'text\', _name=\'process_name\', value=thisprocess.name, _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name cannot be blank.\')))),\n                           TR(\'Name Friendly:\', INPUT(_type=\'text\', _name=\'process_name_friendly\', value=thisprocess.name_friendly, _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name Friendly cannot be blank.\')))),\n                           TR(\'Group:\', SELECT(group_options, value=thisprocess.groups_id, _name="group_id")),\n                           TR(\'Delete \', INPUT(_type="checkbox", _name="delete", _onclick="return confirm(\'Are you sure you want to delete " + thisprocess.name + "?\');")),\n                           TR(INPUT(_type=\'submit\', _value=\'SUBMIT\'))\n                          )\n                     )\n         return dict(form=form)\n   else:\n      redirect(URL(r=request, f=\'index\'))\n      \ndef add():\n   print("processes.add")\n   # Load all groups\n   group_options = [OPTION(group.name, _value=group.id) for group in db().select(db.groups.id, db.groups.name)]\n   form = FORM(\n               TABLE(\n                     TR(TH(H2(\'Create Service\'), _colspan=2, _align=\'center\')),\n                     TR(\'Name:\', INPUT(_type=\'text\', _name=\'process_name\', _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name cannot be blank.\')))),\n                     TR(\'Name Friendly:\', INPUT(_type=\'text\', _name=\'process_name_friendly\', _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name Friendly cannot be blank.\')))),\n                     TR(\'Group:\', SELECT(group_options, _name="group_id"), "Add Group Link"),                     \n                     TR(INPUT(_type=\'submit\', _value=\'SUBMIT\'))\n                    )\n               )\n   if(request.vars):\n      if process_name_exists(request.vars.process_name):\n         print(request.vars.process_name + " process already exists")\n         response.flash=request.vars.process_name + " process already exists"\n         return dict(form=form)\n      else:\n         curtime = MySQLdb.TimestampFromTicks(time.time())\n         db.processes.insert(name=request.vars.process_name, name_friendly=request.vars.process_name_friendly, groups_id=request.vars.group_id, created_at=curtime, updated_at=curtime)\n         print(request.vars.process_name + " successfully inserted")\n         redirect(URL(r=request, f=\'index\'))\n         return dict()\n   else:\n      return dict(form=form)\n   \ndef process_name_exists(name, thisid):\n   processrs = db((db.processes.name == name) & (db.processes.id != thisid)).select(db.processes.id)\n   if processrs:\n      return processrs[0].id\n   else:\n      return 0\n\ndef has_child_rows(process_id):\n   process_instancesrs = db(db.process_instances.processes_id == process_id).select(db.process_instances.id)\n   appsrs = db(db.apps.processes_id == process_id).select(db.apps.id)\n   print("-------------")\n   print(process_instancesrs)\n   print("-------------")\n   print(appsrs)\n   print("-------------")\n   if(appsrs | process_instancesrs):\n      return True\n   else:\n      return False\n         \n\nresponse._vars=response._caller(edit)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/opt/web2py/applications/cmdb/controllers/processes.py", line 164, in <module>\n  File "/opt/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/web2py/applications/cmdb/controllers/processes.py", line 74, in edit\n    if(has_child_rows(thisprocess.id)):\n  File "/opt/web2py/applications/cmdb/controllers/processes.py", line 158, in has_child_rows\n    if(appsrs | process_instancesrs):\n  File "/opt/web2py/gluon/sql.py", line 3317, in __or__\n    if self.colnames!=other.colnames: raise Exception, \'Rows: different colnames\'\nException: Rows: different colnames\n'
p8
s.