(dp1
S'output'
p2
S''
sS'layer'
p3
S'/opt/web2py/applications/cmdb/controllers/process_instances.py'
p4
sS'code'
p5
S'import MySQLdb\nimport time\nimport re\ndef index():  \n   print("process_instances.index")\n   if(len(request.args) == 1):\n      instances = dbload(request.args(0))\n   else:\n      instances = dbload()\n   return dict(instances=instances)\n   \ndef edit():\n   """\n   Edit a particular app instance\n   """\n   print("instances.edit")\n   if(len(request.args) == 1 & request.args(0).isdigit()):\n      # User has selected an instance to edit. Show the form.\n      print("args = " + request.args[0])\n      process_completed = False\n      # Check form for processing. If good, update data in DB. If bad, forward back to form.\n      \n      instance = db_load_instance(request.args[0])\n      process_options = [OPTION(process.name, _value=process.id) for process in db().select(db.processes.id, db.processes.name)]\n      server_options = [OPTION(server.name, _value=server.id) for server in db().select(db.servers.id, db.servers.name)]\n      customer_options = [OPTION(customer.name, _value=customer.id) for customer in db().select(db.customers.id, db.customers.name)]\n      db_options = [OPTION(database.name, _value=database.id) for database in db().select(db.dbs.id, db.dbs.name)]\n      print("loading instance")\n      this_instance = db_load_instance(request.args(0))\n      print("---------------------------------------")\n      #print(this_instance.servers.name)\n      print("active = " + str(this_instance.process_instances.active))\n      print("---------------------------------------")\n      print("instance loaded")\n      form = FORM(TABLE(\n                        TR(TH(H2(\'Modify \' + this_instance.processes.name + " @ " + this_instance.servers.name), _colspan=3, _align=\'center\')),\n                        TR(\'Customer \', SELECT(customer_options, value=this_instance.customers.id, _name="customer_id")),\n                        TR(\'Process \', SELECT(process_options, value=this_instance.processes.id, _name="process_id")),\n                        TR(\'Server \', SELECT(server_options, value=this_instance.servers.id, _name="server_id")),\n                        TR(\'JMX Port \', INPUT(_type="text", _name="port_jmx", value=this_instance.process_instances.jmx_port, requires=IS_INT_IN_RANGE(2000,100000))),\n                        TR(\'HTTP Port \', INPUT(_type="text", _name="port_http", value=this_instance.process_instances.http_port, requires=IS_INT_IN_RANGE(2000,100000))),\n                        TR(\'Active \', (\'YES \', INPUT(_type="radio", _name="active", _value=\'True\', value=str(this_instance.process_instances.active)), \' NO \', INPUT(_type="radio", _name="active", _value=\'False\', value=str(this_instance.process_instances.active)))),\n                        TR("",(INPUT(_type="submit", _value="Submit"), " ", INPUT(_type="button", _value="Cancel", _onclick="parent.location=\'" + URL(r=request, f=\'index\') + "\'")))\n                       )\n                 )\n      if(request.vars):\n         print "Processing update."\n         curtime = MySQLdb.TimestampFromTicks(time.time())\n         process_id = request.vars.process_id\n         customer_id = request.vars.customer_id\n         server_id = request.vars.server_id\n         db_id = request.vars.db_id\n         isactive = request.vars.active\n         port_jmx = request.vars.port_jmx\n         port_http = request.vars.port_http\n         all_digits = "^(\\d+)$"\n         \n         if(customer_id == "SELECT"):\n            response.flash = "Please select a Customer"  \n            return dict(form=form)\n         elif(process_id == "SELECT"):\n            response.flash = "Please select a Service"\n            return dict(form=form)\n         elif(server_id == "SELECT"):\n            response.flash = "Please select a Server"\n            return dict(form=form)\n         elif port_jmx and not re.search(all_digits, port_jmx):\n            response.flash = "JMX Port must be a number or empty."\n            return dict(form=form)\n         elif port_http and not re.search(all_digits, port_http):\n            response.flash = "HTTP Port must be a number or empty."\n            return dict(form=form)\n         else:\n            # PROCESS FORM & INSERT INTO DB\n            print("Process Form")\n            curtime = MySQLdb.TimestampFromTicks(time.time())\n            db(db.process_instances.id == this_instance.process_instances.id).update(processes_id = process_id, servers_id = server_id, customers_id = customer_id, jmx_port = port_jmx, http_port = port_http, active = isactive, updated_at = curtime)\n            print("--------------")\n            print(db._lastsql)\n            print("--------------")\n            print("Service Instance successfully inserted into DB")\n            redirect(URL(r=request, f=\'index\'))\n            return(dict())\n         \n         \n         \n      if(not process_completed):\n         return dict(form=form)\n   else:\n      redirect(URL(r=request,f=\'index\'))\n   \n   \ndef add():\n   print("instances.add")\n   \n   process_options = [OPTION("SELECT", _value="SELECT")] + [OPTION(process.name, _value=process.id) for process in db().select(db.processes.id, db.processes.name)]\n   server_options = [OPTION("SELECT", _value="SELECT")] + [OPTION(server.name, _value=server.id) for server in db().select(db.servers.id, db.servers.name)]\n   customer_options = [OPTION("SELECT", _value="SELECT")] + [OPTION(customer.name, _value=customer.id) for customer in db().select(db.customers.id, db.customers.name)]\n   db_options = [OPTION("NONE", _value="NONE")] + [OPTION(database.name, _value=database.id) for database in db().select(db.dbs.id, db.dbs.name)]\n   \n   if(request.vars):\n      curtime = MySQLdb.TimestampFromTicks(time.time())\n      process_id = request.vars.process_id\n      customer_id = request.vars.customer_id\n      server_id = request.vars.server_id\n      db_id = request.vars.db_id\n      isactive = request.vars.active\n      port_jmx = request.vars.port_jmx\n      port_http = request.vars.port_http\n      form = FORM(TABLE(\n                     TR(TH(H2(\'Create Process Instance\'), _colspan=3, _align=\'center\')),\n                     TR(\'Customer \', SELECT(customer_options, value=customer_id, _name="customer_id")),\n                     TR(\'Process \', SELECT(process_options, value=process_id, _name="process_id")),\n                     TR(\'Server \', SELECT(server_options, value=server_id, _name="server_id")),\n                     TR(\'JMX Port \', INPUT(_type="text", _name="port_jmx", requires=IS_INT_IN_RANGE(2000,100000))),\n                     TR(\'HTTP Port \', INPUT(_type="text", _name="port_http", requires=IS_INT_IN_RANGE(2000,100000))),\n                     TR(\'Active \', (\'YES \', INPUT(_type="radio", _name="active", _value=\'True\', value=isactive), \' NO \', INPUT(_type="radio", _name="active", _value=\'False\', value=isactive))),\n                     TR("",(INPUT(_type="submit", _value="Submit"), " ", INPUT(_type="button", _value="Cancel", _onclick="parent.location=\'" + URL(r=request, f=\'index\') + "\'")))\n                     #TR(TH(H2(\'Modify \' + this_instance.processes.name), _colspan=3, _align=\'center\')),\n                    )\n              )\n      all_digits = "^\\d+$"\n      if(customer_id == "SELECT"):\n         response.flash = "Please select a Customer"  \n         return dict(form=form)\n      elif(process_id == "SELECT"):\n         response.flash = "Please select a Service"\n         return dict(form=form)\n      elif(server_id == "SELECT"):\n         response.flash = "Please select a Server"\n         return dict(form=form)\n      elif port_jmx and not re.search(all_digits, port_jmx):\n         response.flash = "JMX Port must be a number or empty."\n         return dict(form=form)\n      elif port_http and not re.search(all_digits, port_http):\n         response.flash = "HTTP Port must be a number or empty."\n         return dict(form=form)\n      else:\n         # PROCESS FORM & INSERT INTO DB\n         print("Process Form")\n         curtime = MySQLdb.TimestampFromTicks(time.time())\n         print("processes_id = " + process_id)\n         print("servers_id = " + server_id)\n         print("customers_id = " + customer_id)\n         print("active = " + isactive)\n         print("jmx_port = " + port_jmx)\n         print("http_port = " + port_http)\n         \n         process_instance_id = db.process_instances.insert(processes_id = process_id,\n                                                           servers_id = server_id,\n                                                           jmx_port = port_jmx,\n                                                           http_port = port_http,\n                                                           customers_id = customer_id,\n                                                           active = isactive,\n                                                           created_at = curtime,\n                                                           updated_at = curtime)\n         print("--------------")\n         print(db._lastsql)\n         print("process_instance_id = " + process_instances_id)\n         print("--------------")\n         print("Service Instance successfully inserted into DB")\n         # NOW THAT WE HAVE INSERTED THE PROCESS_INSTANCE, INSERT APP_INSTANCES BASED ON WHAT APPS ARE IN THIS PROCESS\n         # 1) FIGURE OUT WHAT APPS WE NEED TO CREATE INSTANCES FOR\n         appsrs = db(db.apps.processes_id == process_id).select(db.apps.id)\n         # 2) INSERT ROWS INTO APP_INSTANCES FOR EACH APP\n         for row in appsrs:\n            db.app_instances.insert(apps_id = row.id,\n                                    process_instances_id = process_instance_id\n                                    active = isactive,\n                                    created_at = curtime,\n                                    updated_at = curtime)\n            print(db._lastsql)\n         redirect(URL(r=request, f=\'index\'))\n         return(dict())\n   else:\n      form = FORM(TABLE(\n                     TR(TH(H2(\'Create Process Instance\'), _colspan=3, _align=\'center\')),\n                     TR(\'Customer \', SELECT(customer_options, _name="customer_id")),\n                     TR(\'Process \', SELECT(process_options, _name="process_id")),\n                     TR(\'Server \', SELECT(server_options, _name="server_id")),\n                     TR(\'JMX Port \', INPUT(_type="text", _name="port_jmx", requires=IS_INT_IN_RANGE(2000,100000))),\n                     TR(\'HTTP Port \', INPUT(_type="text", _name="port_http", requires=IS_INT_IN_RANGE(2000,100000))),\n                     TR(\'Active \', (\'YES \', INPUT(_type="radio", _name="active", _value=\'True\', value=\'True\'), \' NO \', INPUT(_type="radio", _name="active", _value=\'False\', value=\'True\'))),\n                     TR("",(INPUT(_type="submit", _value="Submit"), " ", INPUT(_type="button", _value="Cancel", _onclick="parent.location=\'" + URL(r=request, f=\'index\') + "\'")))\n                     #TR(TH(H2(\'Modify \' + this_instance.processes.name), _colspan=3, _align=\'center\')),\n                    )\n              )\n      return dict(form=form)\n   \n   \ndef db_load_instance(process_instance_id):\n   print("db_load_instance(" + process_instance_id + ")")\n   instances = db(\n                  (db.process_instances.id == process_instance_id)\n                  & (db.process_instances.servers_id == db.servers.id)\n                  & (db.processes.id == db.process_instances.processes_id)\n                  & (db.process_instances.customers_id == db.customers.id)\n                  & (db.groups.id == db.processes.groups_id)\n                 ).select(\n                           db.process_instances.ALL,\n                           db.servers.ALL, \n                           db.customers.ALL,\n                           db.processes.ALL,\n                           db.groups.ALL\n                         )\n   print("--------------")\n   print(db._lastsql)\n   print("--------------")\n   return instances[0]\n   \n   \n   \n   \ndef dbload(sort_by="customer"):\n   """\n   OLD QUERY:\n   SELECT \n   app_instances.id, \n   process_instances.id, process_instances.http_port, process_instances.jmx_port, process_instances.active, \n   servers.id, servers.name, \n   customers.id, customers.name, \n   processes.id, processes.name, \n   dbs.id, dbs.name, \n   groups.id, groups.name \n   FROM customers, apps, servers, db_2_process_instances, groups, processes, app_instances, dbs, process_instances \n   WHERE (((((process_instances.servers_id=servers.id AND processes.id=process_instances.processes_id) \n   AND process_instances.customers_id=customers.id) AND groups.id=processes.groups_id) \n   AND (process_instances.id=db_2_process_instances.process_instances_id AND dbs.id=db_2_process_instances.dbs_id)) \n   AND (app_instances.apps_id=apps.id AND app_instances.process_instances_id=process_instances.id)) \n   GROUP BY apps.id ORDER BY customers.name;\n\n   NEW QUERY:\n   select \n   processes.id AS SERVICE_ID, processes.name AS SERVICE_NAME,\n   customers.id AS C_ID, customers.name AS C_NAME, \n   servers.id AS SERVER_ID, servers.name as SERVER_NAME,\n   groups.name, \n   process_instances.id AS SI_ID, process_instances.http_port, process_instances.jmx_port, process_instances.active, \n   db_2_process_instances.id AS D2SI_ID,\n   dbs.name AS DB_NAME\n   from servers, groups, processes, customers, process_instances process_instances\n   LEFT OUTER JOIN     db_2_process_instances\n   ON             process_instances.id = db_2_process_instances.process_instances_id\n   LEFT OUTER JOIN     dbs\n   ON             dbs.id = db_2_process_instances.dbs_id\n   where processes.id = process_instances.processes_id\n   and servers.id = process_instances.servers_id\n   and customers.id = process_instances.customers_id\n   and groups.id = processes.groups_id\n   """\n   print("instances.dbload")\n   if cmp(sort_by, "customer") == 0:\n      order_by = db.customers.name\n   elif cmp(sort_by, "group") == 0:\n      order_by = db.groups.name\n   elif cmp(sort_by, "process") == 0:\n      order_by = db.processes.name\n   elif cmp(sort_by, "jmx_port") == 0:\n      order_by = db.process_instances.jmx_port\n   elif cmp(sort_by, "server") == 0:\n      order_by = db.servers.name\n   elif cmp(sort_by, "db") == 0:\n      order_by = db.dbs.name\n   rs = db(\n            (db.process_instances.processes_id == db.processes.id)\n            &\n            (db.process_instances.customers_id == db.customers.id)\n            &\n            (db.process_instances.servers_id == db.servers.id)\n            &\n            (db.processes.groups_id == db.groups.id)\n          ).select(\n                     db.processes.ALL, db.customers.ALL, db.groups.ALL, db.servers.ALL, db.process_instances.ALL,       \n                     orderby = order_by\n                   )\n   print("--------------")\n   print(db._lastsql)\n   print("--------------")\n   return rs\nresponse._vars=response._caller(index)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 171, in restricted\n    ccode = compile(code.replace(\'\\r\\n\', \'\\n\'), layer, \'exec\')\n  File "/opt/web2py/applications/cmdb/controllers/process_instances.py", line 169\n    active = isactive,\n         ^\nSyntaxError: invalid syntax\n'
p8
s.