(dp1
S'output'
p2
S''
sS'layer'
p3
S'/opt/web2py/applications/cmdb/controllers/groups.py'
p4
sS'code'
p5
S'import MySQLdb\nimport time\nimport sys, traceback\n# coding: utf8\n# try something like\ndef index(): \n   groups = db().select(db.groups.id, db.groups.name)\n   return dict(groups=groups)\n\ndef edit_CRUD():\n   print("groups.edit")\n   row = db(db.groups.id == request.args[0]).select()[0]\n   if(has_child_rows(row.id)):\n      form = SQLFORM(db.groups, row, deletable=False)\n   else:\n      form = SQLFORM(db.groups, row, deletable=True)\n      \n   if form.accepts(request.vars, session):\n      # PROCESS FORM\n      # Check to ensure this value is not already in DB\n      # If it is, return to form w/ message\n      # If not, insert then return to list\n      if group_name_exists(request.vars.group_name):\n         response.flash=request.vars.group_name + " group already exists"\n         return dict(form=form)\n      else:\n         curtime = MySQLdb.TimestampFromTicks(time.time())\n         db(db.groups.id == request.vars.group_id).update(name=request.vars.group_name, updated_at=curtime)\n         redirect(URL(r=request, f=\'index\'))\n   elif form.errors:\n      # SEND TO FORM WITH ERROR DISPLAY\n      response.flash=\'Form has errors\'\n   else:\n      # FORM NOT FILLED. SHOW EMPTY FORM\n      response.flash = \'Please complete the form.\'\n   return dict(form=form)\n\ndef edit():\n   print("groups.edit")\n   if(len(request.args) == 1 & request.args(0).isdigit()):\n      groups = db(db.groups.id == request.args(0)).select(db.groups.ALL)\n      thisgroup = groups[0]\n      if(request.vars):\n         print("--------------- process form -----------------")\n         form = FORM(\n                     INPUT(_type="hidden", _name="group_id", _value=thisgroup.id),\n                     TABLE(\n                           TR(TH(H2(\'Modify \' + thisgroup.name + \' Group\'), _colspan=2, _align=\'center\')),\n                           TR(\'Name: \', INPUT(_type=\'text\', _name=\'group_name\', value=request.vars.group_name, _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name cannot be blank.\')))),\n                           TR(\'Delete \', INPUT(_type="checkbox", _name="delete", _onclick="return confirm(\'Are you sure you want to delete " + thisgroup.name + "?\');")),\n                           TR(INPUT(_type="submit", _value="SUBMIT"))\n                          )\n                    )\n         if(re.search("^on$", request.vars.delete)):\n            print("DELETE THIS GROUP")\n            if(has_child_rows(thisgroup.id)):\n               response.flash = "This group has child processes. You cannot delete a group with child processes."\n               return(dict(form=form))\n            else:\n               #db(db.groups.id == thisgroup.id).delete()\n               print("--------------")\n               print(db._lastsql)\n               print("--------------")\n               redirect(URL(r=request, f=\'index\'))\n               return(dict())\n         elif form.accepts(request.vars, session):\n            # PROCESS FORM\n            # Check to ensure this value is not already in DB\n            # If it is, return to form w/ message\n            # If not, insert then return to list\n            if group_name_exists(request.vars.group_name):\n               response.flash=request.vars.group_name + " group already exists"\n               return dict(form=form)\n            else:\n               curtime = MySQLdb.TimestampFromTicks(time.time())\n               db(db.groups.id == request.vars.group_id).update(name=request.vars.group_name, updated_at=curtime)\n               redirect(URL(r=request, f=\'index\'))\n         elif form.errors:\n            # SEND TO FORM WITH ERROR DISPLAY\n            response.flash=\'Form has errors\'\n         else:\n            # FORM NOT FILLED. SHOW EMPTY FORM\n            response.flash = \'please fill the form\'\n         return dict(form=form)\n      else:\n         form = FORM(\n                     INPUT(_type="hidden", _name="group_id", _value=thisgroup.id),\n                     TABLE(\n                           TR(TH(H2(\'Modify \' + thisgroup.name + \' Group\'), _colspan=2, _align=\'center\')),\n                           TR(\'Name: \', INPUT(_type=\'text\', _name=\'group_name\', value=thisgroup.name, _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name cannot be blank.\')))),\n                           TR(\'Delete \', INPUT(_type="checkbox", _name="delete", _onclick="return confirm(\'Are you sure you want to delete " + thisgroup.name + "?\');")),\n                           TR(INPUT(_type="submit", _value="SUBMIT"))\n                          )\n                    )\n         return dict(form=form)\n         \n   else:\n      redirect(URL(r=request, f=\'index\'))\n\ndef add():\n   print("groups.add")\n   form = FORM(\n               TABLE(\n                     TR(TH(H2(\'Create Group\'), _colspan=2, _align=\'center\')),\n                     TR(\'Name: \', INPUT(_type=\'text\', _name=\'group_name\', _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name cannot be blank.\')))),\n                     TR(INPUT(_type=\'submit\', _value=\'SUBMIT\'))\n                     )\n               )\n   if(request.vars):\n      if group_name_exists(request.vars.group_name):\n         response.flash=request.vars.group_name + " group already exists"\n         return dict(form=form)\n      else:\n         curtime = MySQLdb.TimestampFromTicks(time.time())\n         db.groups.insert(name=request.vars.group_name, created_at=curtime, updated_at=curtime)\n         print(request.vars.group_name + " successfully inserted")\n         redirect(URL(r=request, f=\'index\'))\n         return dict()\n   else:\n      return dict(form=form)\n        \ndef delete():\n   print("groups.delete")\n   \n   \ndef group_name_exists(name):\n   grouprs = db(db.groups.name == name).select(db.groups.id)\n   if grouprs:\n      return grouprs[0].id\n   else:\n      return 0\n\ndef has_child_rows(groupid):\n   processesrs = db(db.processes.groups_id == groupid).select(db.processes.id)\n   if(processesrs):\n      return True\n   else:\n      return False\n         \nresponse._vars=response._caller(edit)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/opt/web2py/applications/cmdb/controllers/groups.py", line 140, in <module>\n  File "/opt/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/web2py/applications/cmdb/controllers/groups.py", line 54, in edit\n    if(re.search("^on$", request.vars.delete)):\nNameError: global name \'re\' is not defined\n'
p8
s.