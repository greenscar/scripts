(dp1
S'output'
p2
S''
sS'layer'
p3
S'/opt/web2py/applications/cmdb/controllers/processes.py'
p4
sS'code'
p5
S'import MySQLdb\nimport time\nimport sys, traceback\n# coding: utf8\n# try something like\ndef index(): \n   if len(request.args) == 1:\n      sort_by = request.args(0)\n      if cmp(sort_by, "friendly") == 0:\n            sort_by = db.processes.name_friendly\n      elif cmp(sort_by, "process") == 0:\n         sort_by = db.processes.name\n      elif cmp(sort_by, "group") == 0:\n         sort_by = db.groups.name\n      else:\n         sort_by = db.processes.name\n   else:\n      sort_by = db.groups.name\n   processes = db((db.processes.groups_id == db.groups.id)).select(db.processes.ALL, db.groups.ALL, orderby=sort_by)\n   return dict(processes=processes)\n   \ndef edit():\n   print("processes.edit")\n   if(request.args):\n      row = db(db.processes.id == request.args[0]).select()[0]\n      print(str(row))\n      if(has_child_rows(row.id)):\n         form = SQLFORM(db.processes, row, deletable=False)\n      else:\n         form = SQLFORM(db.processes, row, deletable=True)\n         \n      if form.accepts(request.vars, session):\n         if process_name_exists(request.vars.process_name):\n            response.flash=request.vars.process_name + " process already exists"\n            return dict(form=form)\n         else:\n            curtime = MySQLdb.TimestampFromTicks(time.time())\n            db(db.processes.id == request.vars.process_id).update(name=request.vars.process_name, updated_at=curtime)\n            redirect(URL(r=request, f=\'index\'))\n      elif form.errors:\n         response.flash=\'Errors in your form.\'\n      else:\n         response.flash=\'Please complete the form\'\n      print(str(form))\n      return dict(form=form)\n   else:\n      redirect(URL(r=request, f=\'index\'))\n      \ndef add():\n   print("processes.add")\n   # Load all groups\n   group_options = [OPTION(group.name, _value=group.id) for group in db().select(db.groups.id, db.groups.name)]\n      \n            \n   form = FORM(\n               TABLE(\n                     TR(TH(H2(\'Create Service\'), _colspan=2, _align=\'center\')),\n                     TR(\'Name:\', INPUT(_type=\'text\', _name=\'process_name\', _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name cannot be blank.\')))),\n                     TR(\'Name Friendly:\', INPUT(_type=\'text\', _name=\'process_name_friendly\', _size=50, requires=IS_NOT_EMPTY(error_message=T(\'Name Friendly cannot be blank.\')))),\n                     TR(\'Group:\', SELECT(group_options, _name="group_id"), "Add Group Link"),                     \n                     TR(INPUT(_type=\'submit\', _value=\'SUBMIT\'))\n                    )\n               )\n   if(request.vars):\n      if process_name_exists(request.vars.process_name):\n         print(request.vars.process_name + " process already exists")\n         response.flash=request.vars.process_name + " process already exists"\n         return dict(form=form)\n      else:\n         curtime = MySQLdb.TimestampFromTicks(time.time())\n         db.processes.insert(name=request.vars.process_name, name_friendly=request.vars.process_name_friendly, groups_id=request.vars.group_id, created_at=curtime, updated_at=curtime)\n         print(request.vars.process_name + " successfully inserted")\n         redirect(URL(r=request, f=\'index\'))\n         return dict()\n   else:\n      return dict(form=form)\n   \ndef process_name_exists(name):\n   processrs = db(db.processes.name == name).select(db.processes.id)\n   if processrs:\n      return processrs[0].id\n   else:\n      return 0\n\ndef has_child_rows(process_id):\n   process_instancesrs = db(db.process_instances.processes_id == process_id).select()\n   appsrs = db(db.apps.processes_id == process_id).select(db.apps.id)\n   if(appsrs | process_instancesrs):\n      return True\n   else:\n      return False\n         \n\nresponse._vars=response._caller(edit)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/opt/web2py/gluon/restricted.py", line 173, in restricted\n    exec ccode in environment\n  File "/opt/web2py/applications/cmdb/controllers/processes.py", line 94, in <module>\n  File "/opt/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/web2py/applications/cmdb/controllers/processes.py", line 27, in edit\n    if(has_child_rows(row.id)):\n  File "/opt/web2py/applications/cmdb/controllers/processes.py", line 88, in has_child_rows\n    if(appsrs | process_instancesrs):\n  File "/opt/web2py/gluon/sql.py", line 3317, in __or__\n    if self.colnames!=other.colnames: raise Exception, \'Rows: different colnames\'\nException: Rows: different colnames\n'
p8
s.